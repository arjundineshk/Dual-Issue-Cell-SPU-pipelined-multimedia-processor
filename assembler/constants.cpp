#include <map>

const int OPCODE_LEN = 32;



enum opcode {
    //Simple Fixed 1
    ADD_WORD = 0b00011000000,
//     ADD_WORD_IMMEDIATE = 0b00011100,
//     SUBTRACT_FROM_WORD = 0b00001000000,
//     SUBTRACT_FROM_WORD_IMMEDIATE= 0b00001100,
//     ADD_EXTENDED = 0b01101000000,
//     CARRY_GENERATE = 0b00011000010,
//     SUBTRACT_FROM_EXTENDED = 0b01101000001,
//     BORROW_GENERATE = 0b00001000010,
//     ADD_HALFWORD= 0b00011001000,
//     ADD_HALFWORD_IMMEDIATE= 0b00011101,
//     SUBTRACT_FROM_HALFWORD = 0b00001001000,
//     SUBTRACT_FROM_HALFWORD_IMMEDIATE = 0b00001101,
//     COUNT_LEADING_ZEROS = 0b01010100101,
//     FORM_SELECT_MASK_FOR_HALFWORD = 0b00110110101,
//     FORM_SELECT_MARK_FOR_WORDS = 0b00110110100,
//     AND = 0b00011000001,
//     AND_WITH_COMPLEMENT = 0b01011000001,
//     AND_HALFWORD_IMMEDIATE = 0b00010101,
//     AND_WORD_IMMEDIATE = 0b00010100,
//     OR = 0b00001000001,
//     OR_WITH_COMPLEMENT = 0b01011001001,
//     OR_HALFWORD_IMMEDIATE= 0b00000101,
//     OR_WORD_IMMEDIATE= 0b00000100,
//     EXCLUSIVE_OR = 0b01001000001,
//     EXCLUSIVE_OR_HALFWORD_IMMEDIATE = 0b01000101,
//     EXCLUSIVE_OR_WORD_IMMEDIATE = 0b01000100,
//     NAND = 0b00011001001,
//     NOR = 0b00001001001,
//     COMPARE_EQUAL_HALFWORD = 0b01111001000,
//     COMPARE_EQUAL_HALFWORD_IMMEDIATE = 0b01111101,
//     COMPARE_EQUAL_WORD = 0b01111000000,
//     COMPARE_EQUAL_WORD_IMMEDIATE = 0b01111100,
//     COMPARE_GREATER_THAN_HALFWORD = 0b01001001000,
//     COMPARE_GREATER_THAN_HALFWORD_IMMEDIATE = 0b01001101,
//     COMPARE_GREATER_THAN_WORD = 0b01001000000,
//     COMPARE_GREATER_THAN_WORD_IMMEDIATE = 0b01001100,
//     COMPARE_LOGICAL_GREATER_THAN_HALFWORD = 0b01011001000,
//     COMPARE_LOGICAL_GREATER_THAN_HALFWORD_IMMEDIATE = 0b01011101,
//     COMPARE_LOGICAL_GREATER_THAN_WORD = 0b01011000000,
//     COMPARE_LOGICAL_GREATER_THAN_WORD_IMMEDIATE = 0b01011100,

//  //Simple Fixed 2
//     SHIFT_LEFT_HALFWORD =  0b00001011111,
//     SHIFT_LEFT_HALFWORD_IMMEDIATE = 0b00001111111,
//     SHIFT_LEFT_WORD = 0b00001011011,
//     SHIFT_LEFT_WORD_IMMEDIATE = 0b00001111011,
//     ROTATE_HALFWORD = 0b00001011100,
//     ROTATE_HALFWORD_IMMEDIATE = 0b00001111100,
//     ROTATE_WORD = 0b00001011000,
//     ROTATE_WORD_IMMEDIATE = 0b00001111000,

//  // Branch
//     BRANCH_RELATIVE = 0b001100100,
//     BRANCH_ABSOLUTE = 0b001100000,
//     BRANCH_RELATIVE_AND_SET_LINK = 0b001100110,
//     BRANCH_ABSOLUTE_AND_SET_LINK = 0b001100010,
//     BRANCH_IF_NOT_ZERO_WORD = 0b001000010,
//     BRANCH_IF_ZERO_WORD = 0b001000000,
//     BRANCH_IF_NOT_ZERO_HALFWORD = 0b001000110,
//     BRANCH_IF_ZERO_HALFWORD = 0b001000100,

// //Single Precision FP MAC
//     FLOATING_ADD = 7'd90,
//     FLOATING_SUBTRACT = 7'd91,
//     FLOATING_MULTIPLY_AND_ADD = 7'd57,
//     FLOATING_NEGATIVE_MULTIPLY_AND_SUBSTRACT = 7'd58,
//     FLOATING_MULTIPLY_AND_SUBTRACT = 7'd59,
//     FLAOTING_MULTIPLY = 7'd60,

// //Single precision integer MAC   
//     MULTIPLY = 7'd61,
//     MULTIPLY_UNSIGNED = 7'd62,
//     MULTIPLY_IMMEDIATE = 7'd63,
//     MULTIPLY_UNSIGNED_IMMEDIATE = 7'd64,
//     MULTIPLY_AND_ADD = 7'd65,

// //Byte
//     COUNT_ONES_IN_BYTES = 7'd66,
//     ABSOLUTE_DIFFERENCES_OF_BYTES = 7'd67,
//     AVERAGE_BYTES = 7'd68,
//     SUM_BYTES_INTO_HALFWORD = 7'd69,

// //Permute   
//     SHIFT_LEFT_QUADWORD_BY_BITS = 7'd70,
//     SHIFT_LEFT_QUADWORD_BY_BITS_IMMEDIATE = 7'd71,
//     SHIFT_LEFT_QUADWORD_BY_BYTES = 7'd72,
//     SHIFT_LEFT_QUADWORD_BY_BYTES_IMMEDIATE = 7'd73,
//     SHIFT_LEFT_QUADWORD_BY_BYTES_FROM_BIT_SHIFT_COUNT = 7'd74,
//     ROTATE_QUADWORD_BY_BYTES = 7'd75,
//     ROTATE_QUADWORD_BY_BYTES_IMMEDIATE = 7'd76,
//     ROTATE_QUADWORD_BY_BYTES_FROM_BIT_SHIFT_COUNT = 7'd77,
//     ROTATE_QUADWORD_BY_BITS = 7'd78,
//     ROTATE_QUADWORD_BY_BITS_IMMEDIATE = 7'd79,
//     GATHER_BITS_FROM_BYTES = 7'd80,
//     GATHER_BITS_FROM_HALFWORD = 7'd81,
//     GATHER_BITS_FROM_WORDS = 7'd82,
//     SHUFFLE_BYTES = 7'd83,

// //Load & Store
//     LOAD_QUADWORD_D = 7'd84,
//     LOAD_QUADWORD_X = 7'd85,
//     LOAD_QUADWORD_A = 7'd86,
//     STORE_QUADWORD_D = 7'd87,
//     STORE_QUADWORD_X = 7'd88,
//     STORE_QUADWORD_A = 7'd89,
//     IMMEDIATE_LOAD_HALFWORD = 7'd94,
//     IMMEDIATE_LOAD_WORD = 7'd95,
//     IMMEDIATE_LOAD_ADDRESS = 7'd96,


// //Misc Instrs
//     NOP = 7'd92,
//     LNOP = 7'd93
};

const std::map<std::string, std::string> opcode_map{
   {"a", "00011000000"},
};