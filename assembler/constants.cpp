#include <map>

const int INSTR_LEN = 32;
const int REG_ADDR_LEN = 7;
const int IMM10_LEN = 10;
const int IMM16_LEN = 16;
const int IMM18_LEN = 18;

enum instrFormatOpcodeLenEnum {
    RR_RI7 = 11, RRR = 4, RI10 = 8, RI16 = 9, RI18 = 7  //opcode lengths or different instruction type
};

struct instrFormat
{
    std::string instr;
    instrFormatOpcodeLenEnum type;

    instrFormat(const std::string& instr_, instrFormatOpcodeLenEnum type_) : instr(instr_), type(type_) {}
};

enum opcode {
    //Simple Fixed 1
    ADD_WORD = 0b00011000000,
    ADD_WORD_IMMEDIATE = 0b00011100,
    SUBTRACT_FROM_WORD = 0b00001000000,
    SUBTRACT_FROM_WORD_IMMEDIATE= 0b00001100,
    ADD_EXTENDED = 0b01101000000,
    CARRY_GENERATE = 0b00011000010,
    SUBTRACT_FROM_EXTENDED = 0b01101000001,
    BORROW_GENERATE = 0b00001000010,
    ADD_HALFWORD= 0b00011001000,
    ADD_HALFWORD_IMMEDIATE= 0b00011101,
    SUBTRACT_FROM_HALFWORD = 0b00001001000,
    SUBTRACT_FROM_HALFWORD_IMMEDIATE = 0b00001101,
    COUNT_LEADING_ZEROS = 0b01010100101,
    FORM_SELECT_MASK_FOR_HALFWORD = 0b00110110101,
    FORM_SELECT_MARK_FOR_WORDS = 0b00110110100,
    AND = 0b00011000001,
    AND_WITH_COMPLEMENT = 0b01011000001,
    AND_HALFWORD_IMMEDIATE = 0b00010101,
    AND_WORD_IMMEDIATE = 0b00010100,
    OR = 0b00001000001,
    OR_WITH_COMPLEMENT = 0b01011001001,
    OR_HALFWORD_IMMEDIATE= 0b00000101,
    OR_WORD_IMMEDIATE= 0b00000100,
    EXCLUSIVE_OR = 0b01001000001,
    EXCLUSIVE_OR_HALFWORD_IMMEDIATE = 0b01000101,
    EXCLUSIVE_OR_WORD_IMMEDIATE = 0b01000100,
    NAND = 0b00011001001,
    NOR = 0b00001001001,
    COMPARE_EQUAL_HALFWORD = 0b01111001000,
    COMPARE_EQUAL_HALFWORD_IMMEDIATE = 0b01111101,
    COMPARE_EQUAL_WORD = 0b01111000000,
    COMPARE_EQUAL_WORD_IMMEDIATE = 0b01111100,
    COMPARE_GREATER_THAN_HALFWORD = 0b01001001000,
    COMPARE_GREATER_THAN_HALFWORD_IMMEDIATE = 0b01001101,
    COMPARE_GREATER_THAN_WORD = 0b01001000000,
    COMPARE_GREATER_THAN_WORD_IMMEDIATE = 0b01001100,
    COMPARE_LOGICAL_GREATER_THAN_HALFWORD = 0b01011001000,
    COMPARE_LOGICAL_GREATER_THAN_HALFWORD_IMMEDIATE = 0b01011101,
    COMPARE_LOGICAL_GREATER_THAN_WORD = 0b01011000000,
    COMPARE_LOGICAL_GREATER_THAN_WORD_IMMEDIATE = 0b01011100,

 //Simple Fixed 2
    SHIFT_LEFT_HALFWORD =  0b00001011111,
    SHIFT_LEFT_HALFWORD_IMMEDIATE = 0b00001111111,
    SHIFT_LEFT_WORD = 0b00001011011,
    SHIFT_LEFT_WORD_IMMEDIATE = 0b00001111011,
    ROTATE_HALFWORD = 0b00001011100,
    ROTATE_HALFWORD_IMMEDIATE = 0b00001111100,
    ROTATE_WORD = 0b00001011000,
    ROTATE_WORD_IMMEDIATE = 0b00001111000,

 // Branch
    BRANCH_RELATIVE = 0b001100100,
    BRANCH_ABSOLUTE = 0b001100000,
    BRANCH_RELATIVE_AND_SET_LINK = 0b001100110,
    BRANCH_ABSOLUTE_AND_SET_LINK = 0b001100010,
    BRANCH_IF_NOT_ZERO_WORD = 0b001000010,
    BRANCH_IF_ZERO_WORD = 0b001000000,
    BRANCH_IF_NOT_ZERO_HALFWORD = 0b001000110,
    BRANCH_IF_ZERO_HALFWORD = 0b001000100,

//Single Precision FP MAC
    FLOATING_ADD = 0b01011000100,
    FLOATING_SUBTRACT = 0b01011000101,
    FLOATING_MULTIPLY_AND_ADD = 0b1110,
    FLOATING_NEGATIVE_MULTIPLY_AND_SUBSTRACT = 0b1101,
    FLOATING_MULTIPLY_AND_SUBTRACT = 0b1111,
    FLAOTING_MULTIPLY = 0b01011000110,

//Single precision integer MAC   
    MULTIPLY = 0b01111000100,
    MULTIPLY_UNSIGNED = 0b01111001100,
    MULTIPLY_IMMEDIATE = 0b01110100,
    MULTIPLY_UNSIGNED_IMMEDIATE = 0b01110100,
    MULTIPLY_AND_ADD = 0b1100,

//Byte
    COUNT_ONES_IN_BYTES = 0b01010110100,
    ABSOLUTE_DIFFERENCES_OF_BYTES = 0b00001010011,
    AVERAGE_BYTES = 0b00011010011,
    SUM_BYTES_INTO_HALFWORD = 0b01001010011,

//Permute   
    SHIFT_LEFT_QUADWORD_BY_BITS = 0b111011011,
    SHIFT_LEFT_QUADWORD_BY_BITS_IMMEDIATE = 0b111111011,
    SHIFT_LEFT_QUADWORD_BY_BYTES = 0b111011111,
    SHIFT_LEFT_QUADWORD_BY_BYTES_IMMEDIATE = 0b111111111,
    SHIFT_LEFT_QUADWORD_BY_BYTES_FROM_BIT_SHIFT_COUNT = 0b111001111,
    ROTATE_QUADWORD_BY_BYTES = 0b111011100,
    ROTATE_QUADWORD_BY_BYTES_IMMEDIATE = 0b111111100,
    ROTATE_QUADWORD_BY_BYTES_FROM_BIT_SHIFT_COUNT = 0b111001100,
    ROTATE_QUADWORD_BY_BITS = 0b111011000,
    ROTATE_QUADWORD_BY_BITS_IMMEDIATE = 0b111111000,
    GATHER_BITS_FROM_BYTES = 0b110110010,
    GATHER_BITS_FROM_HALFWORD = 0b110110001,
    GATHER_BITS_FROM_WORDS = 0b110110000,
    SHUFFLE_BYTES = 0b1011,

//Load & Store
    LOAD_QUADWORD_D = 0b00110100,
    LOAD_QUADWORD_X = 0b00111000100,
    LOAD_QUADWORD_A = 0b001100001,
    IMMEDIATE_LOAD_HALFWORD = 0b010000011,
    IMMEDIATE_LOAD_WORD = 0b010000001,
    IMMEDIATE_LOAD_ADDRESS = 0b0100001,
    STORE_QUADWORD_D = 0b00100100,
    STORE_QUADWORD_X = 0b00101000100,
    STORE_QUADWORD_A = 0b001000001,
    


// //Misc Instrs
//     NOP = 7'd92,
//     LNOP = 7'd93
};

// instrFormat f;
// f.instr = "00011000000";
// f.type = instrFormatOpcodeLenEnum::RR_RI7;
const std::map<std::string, std::string> opcode_map{
   {"a", "00011000000"},
   {"ai", "00011100"},
   {"sf", "00001000000"},
   {"sfi", "00001100"},
   {"addx", "01101000000"},
   {"cg", "00011000010"},
   {"sfx", "01101000001"},
   {"bg", "00001000010"},
   {"ah", "00011001000"},
   {"ahi", "00011101"},
   {"sfh", "00001001000"},
   {"sfhi", "00001101"},
   {"clz", "01010100101"},
   {"fsmh", "00110110101"},
   {"fsm", "00110110100"},
   {"and", "00011000001"},
   {"andc", "01011000001"},
   {"andhi", "00010101"},
   {"andi", "00010100"},
   {"or", "00001000001"},
   {"orc", "01011001001"},
   {"orhi", "00000101"},
   {"ori", "00000100"},
   {"xor", "01001000001"},
   {"xorhi", "01000101"},
   {"xori", "01000100"},
   {"nand", "00011001001"},
   {"nor", "00001001001"},
   {"ceqh", "01111001000"},
   {"ceqhi", "01111101"},
   {"ceq", "01111000000"},
   {"ceqi", "01111100"},
   {"cgth", "01001001000"},
   {"cgthi", "01001101"},
   {"cgt", "01001000000"},
   {"cgti", "01001100"},
   {"clgth", "01011001000"},
   {"clgthi", "01011101"},
   {"clgt", "01011000000"},
   {"clgti", "01011100"},


    //SIMPLE FIXED 2
   {"shlh", "00001011111"},
   {"shlhi", "00001111111"},
   {"shl", "00001011011"},
   {"shli", "00001111011"},
   {"roth", "00001011100"},
   {"rothi", "00001111100"},
   {"rot", "00001011000"},
   {"roti", "00001111000"},

    //BRANCH
   {"br", "001100100"},
   {"bra", "001100000"},
   {"brsl", "001100110"},
   {"brasl", "001100010"},
   {"brnz", "001000010"},
   {"brz", "001000000"},
   {"brhnz", "001000110"},
   {"brhz", "001000100"},

    //Single Precision FP MAC
    {"fa", "01011000100"},
   {"fs", "01011000101"},
   {"fma", "1110"},
   {"fnms", "1101"},
   {"fms", "1111"},
   {"fm", "01011000110"},

   //Single Precision Integer MAC
    {"mpy", "01111000100"},
   {"mpyu", "01111001100"},
   {"mpyi", "01110100"},
   {"mpyui", "01110100"},
   {"mpya", "1100"},

   //    Byte
    {"cntb", "01010110100"},
   {"absdb", "00001010011"},
   {"avgb", "00011010011"},
   {"sumb", "01001010011"},

    //Permute
   {"shlqbi", "111011011"},
   {"shlqbii", "111111011"},
   {"shlqby", "111011111"},
   {"shlqbyi", "111111111"},
   {"shlqbybi", "111001111"},
   {"rotqby", "111011100"},
   {"rotqbyi", "111111100"},
   {"rotqbybi", "111001100"},
   {"rotqbi", "111011000"},
   {"rotqbii", "111111000"},
   {"gbb", "110110010"},
   {"gbh", "110110001"},
   {"gb", "110110000"},
   {"shufb", "1011"},


    //Load & Store
    {"lqd", "00110100"},
   {"lqx", "00111000100"},
   {"lqa", "001100001"},
   {"ilh", "010000011"},
   {"il", "010000001"},
   {"ila", "0100001"},
   {"stqd", "00100100"},
   {"stqx", "00101000100"},
   {"stqa", "001000001"},
   
};